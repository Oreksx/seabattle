from random import randint


class BoardException(Exception):
    pass


class BoardOutException(BoardException):
    def __str__(self):
        return "Вы пытаетесь выстрелить за доску!"


class BoardUsedException(BoardException):
    def __str__(self):
        return "Вы уже стреляли в эту клетку"


class BoardWrongShipException(BoardException):
    pass


class Point:
    def __init__(self, r, c):
        self.r = r
        self.c = c

    def __eq__(self, other):
        return self.r == other.r and self.c == other.c

    def __repr__(self):
        return f"({self.r}, {self.c})"


class Ship:
    def __init__(self, bow, l, o):
        self.bow = bow
        self.l = l
        self.o = o
        self.lives = l

    @property
    def points(self):
        ship_points = []
        for i in range(self.l):
            cur_r = self.bow.r
            cur_c = self.bow.c

            if self.o == 0:
                cur_r += i

            elif self.o == 1:
                cur_c += i

            ship_points.append(Point(cur_r, cur_c))

        return ship_points

    def shooten(self, shot):
        return shot in self.points


class Board:
    def __init__(self, hid=False, size=6):
        self.size = size
        self.hid = hid

        self.count = 0

        self.field = [["O"] * size for _ in range(size)]

        self.busy = []
        self.ships = []

    def place_ship(self, ship):

        for d in ship.points:
            if self.out(d) or d in self.busy:
                raise BoardWrongShipException()
        for d in ship.points:
            self.field[d.r][d.c] = "■"
            self.busy.append(d)

        self.ships.append(ship)
        self.contour(ship)

    def contour(self, ship, verb=False):
        around = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        for d in ship.points:
            for dr, dc in around:
                cur = Point(d.r + dr, d.c + dc)
                if not (self.out(cur)) and cur not in self.busy:
                    if verb:
                        self.field[cur.r][cur.c] = "."
                    self.busy.append(cur)

    def __str__(self):
        res = ""
        res += "  | 1 | 2 | 3 | 4 | 5 | 6 |"
        for i, row in enumerate(self.field):
            res += f"\n{i + 1} | " + " | ".join(row) + " |"

        if self.hid:
            res = res.replace("■", "O")
        return res

    def out(self, d):
        return not ((0 <= d.r < self.size) and (0 <= d.c < self.size))

    def shot(self, d):
        if self.out(d):
            raise BoardOutException()

        if d in self.busy:
            raise BoardUsedException()

        self.busy.append(d)

        for ship in self.ships:
            if d in ship.points:
                ship.lives -= 1
                self.field[d.r][d.c] = "X"
                if ship.lives == 0:
                    self.count += 1
                    self.contour(ship, verb=True)
                    print("Корабль уничтожен!")
                    return False
                else:
                    print("Корабль поврежден")
                    return True

        self.field[d.r][d.c] = "T"
        print("Мимо")
        return False

    def begin(self):
        self.busy = []


class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError()

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)


class Enemy(Player):
    def ask(self):
        d = Point(randint(0, 5), randint(0, 5))
        print(f"Ход вашего противника: {d.r + 1} {d.c + 1}")
        return d


class User(Player):
    def ask(self):
        while True:
            cords = input("Ваш ход: ").split()

            if len(cords) != 2:
                print(" Введите 2 координаты! ")
                continue

            r, c = cords

            if not (r.isdigit()) or not (c.isdigit()):
                print(" Введите числа! ")
                continue

            r, c = int(r), int(c)

            return Point(r - 1, c - 1)


class StartPlay:
    def __init__(self, size=6):
        self.lens = [3, 2, 2, 1, 1, 1, 1]
        self.size = size
        pl = self.random_board()
        en = self.random_board()
        en.hid = True

        self.en = Enemy(en, pl)
        self.us = User(pl, en)

    def random_board(self):
        board = None
        while board is None:
            board = self.random_place()
        return board

    def random_place(self):
        board = Board(size=self.size)
        attempts = 0
        for l in self.lens:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Point(randint(0, self.size), randint(0, self.size)), l, randint(0, 1))
                try:
                    board.place_ship(ship)
                    break
                except BoardWrongShipException:
                    pass
        board.begin()
        return board

    def greetings(self):
        print("   -------------------")
        print("     Добро пожаловать  ")
        print("         в игру       ")
        print("       морской бой    ")
        print("   -------------------")
        print("    формат ввода: r c ")
        print("    r - номер строки  ")
        print("    c - номер столбца ")

    def redraw(self):
        num = 0
        i = "-" * 30
        while True:
            print(i, f'\n')
            print("     Доска пользователя:")
            print(self.us.board)
            print(i, f'\n')
            print("     Доска компьютера:")
            print(self.en.board)
            if num % 2 == 0:
                print(i)
                print("Ходит пользователь!")
                repeat = self.us.move()
            else:
                print(i)
                print("Ходит компьютер!")
                repeat = self.en.move()
            if repeat:
                num -= 1

            if self.en.board.count == 7:
                print(i)
                print("Пользователь выиграл!")
                break

            if self.us.board.count == 7:
                print(i)
                print("Компьютер выиграл!")
                break
            num += 1

    def play(self):
        self.greetings()
        self.redraw()


s = StartPlay()
s.play()
